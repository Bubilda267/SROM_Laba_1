import org.junit.jupiter.api.Test;

import static Lib.Division.divide;
import static org.junit.jupiter.api.Assertions.assertEquals;

import static Lib.Addition.add;
import static Lib.Subtraction.subtract;
import static Lib.Comparing.compare;
import static Lib.Multiplication.multiply;
import static Lib.Exponentiation.exponentiate;

public class LibTest1 {

    @Test
    void compare1(){
        String a = "D4D2110984907B5625309D956521BAB4157B8B1ECE04043249A3D379AC112E5B9AF44E721E148D88A942744CF56A06B92D28A0DB950FE4CED2B41A0BD38BCE7D0BE1055CF5DE38F2A588C2C9A79A75011058C320A7B661C6CE1C36C7D870758307E5D2CF07D9B6E8D529779B6B2910DD17B6766A7EFEE215A98CAC300F2827DB";
        String b = "D4D2110984907B5625309D956521BAB4157B8B1ECE04043249A3D379AC112E5B9AF44E721E148D88A942744CF56A06B92D28A0DB950FE4CED2B41A0BD38BCE7D0BE1055CF5DE38F2A588C2C9A79A75011058C320A7B661C6CE1C36C7D870758307E5D2CF07D9B6E8D529779B6B2910DD17B6766A7EFEE215A98CAC300F2827DB";
        int expected = 0;
        assertEquals(compare(a,b), expected);
    }

    @Test
    void compare2(){
        String a = "30F51035ED319BC50C0C4503B4D44872FC7DE7FC00F5DE863D6520E3906FC3E7E8761505118C918DB31AADBEA5A054B13A25F259CD47C1FAA7DB9B76F2DB450861BA26C4794E8E3BFBC2924DE45E47E5408536E3548A03591DA0556D595AB78C55149F45170F2CB7736A46976D1C09BFCE4DF6EAB040599AF235968F8070E25C";
        String b = "269D7722EA018F2AC35C5A3517AA06EAA1949059AE8240428BBFD0A8BE6E2EBF91223991F80D7413D6B2EB213E7122710EDEC617460FA0191F3901604619972018EBEF22D81AED9C56424014CADCC2CCDEE67D36A54BFC500230CA6693ABA057B374746622341ED6D52FE5A79E6860F54F197791B3FEF49FD534CB2C675B6BDB";
        int expected = 1;
        assertEquals(compare(a,b), expected);
    }

    @Test
    void compare3(){
        String a = "87D6D58D3991D536544389CEFA72FD0EBED75B2EBDC2C79BC3717793108F0952011E7E2D7040FFFB32F10BEB8ED0A485026B6860020B230128A8222B0525A6888942FB01C537800BF25D6F021D4B99D3CBD6DF9055FA22F91A6CFC4FDFC408AEF78F6418D3CE4E20EC7888B61BAE3D73C27C257CCA905DE0353C3A7CFFD9FE15";
        String b = "FAAE2DBD9EECEE161154B081A68CB675BFC633DF8811446F22C2AB317B4F76CFFC36AF3078C795EBB23EEB59DEA12EA2E2E7F05426B9FA209A9EF21DFBB4111A49F75684193CF705FE0B1E4A96E88733981ECE3AABEC42506A92B199681392882EF5180A5EF518373DA17D712E9BF3936FBCAB1AF13BB215DA73B29B80D36DC";
        int expected = 1;
        assertEquals(compare(a,b), expected);
    }

    @Test
    void compare4(){
        String a = "791EDB102DA183759979CEF70E1405AF14B98CD44357EADF6A8E35E49F99BB56CBD3F68897D6E05502ED1DE14EC46D04F96992C2D129737987E84E62371648B37633794016852A8CBFFCFDE06B17EC216AE8914D59E677A15A90361A594F0D1524A41AE63C59D343D4E522646722B0292DD7C85571AC9A84FDA6CD2D8DE307F6";
        String b = "100F5B09D673358ABEDBD58C6088702BDD390E803011AB27B2DFFAD77B028C4A8CCF274B60817E05035DE29CCDD951189FBD4FB22D334967AB090708D3C3BEF3BFF767441DBBCAA98B25A6CE2886385F536BF70DDAFE09A9A74FD326A391315C41C337EFF10282164C15DAB1A82D0ED9CF053EDD23C3CF86532E307AA8DBD060B";
        int expected = -1;
        assertEquals(compare(a,b), expected);
    }

    @Test
    void addition1() throws Exception {
        String a = "D4D2110984907B5625309D956521BAB4157B8B1ECE04043249A3D379AC112E5B9AF44E721E148D88A942744CF56A06B92D28A0DB950FE4CED2B41A0BD38BCE7D0BE1055CF5DE38F2A588C2C9A79A75011058C320A7B661C6CE1C36C7D870758307E5D2CF07D9B6E8D529779B6B2910DD17B6766A7EFEE215A98CAC300F2827DB";
        String b = "3A7EF2554E8940FA9B93B2A5E822CC7BB262F4A14159E4318CAE3ABF5AEB1022EC6D01DEFAB48B528868679D649B445A753684C13F6C3ADBAB059D635A2882090FC166EA9F0AAACD16A062149E4A0952F7FAAB14A0E9D3CB0BE9200DBD3B0342496421826919148E617AF1DB66978B1FCD28F8408506B79979CCBCC7F7E5FDE7";
        String expected = "10F51035ED319BC50C0C4503B4D44872FC7DE7FC00F5DE863D6520E3906FC3E7E8761505118C918DB31AADBEA5A054B13A25F259CD47C1FAA7DB9B76F2DB450861BA26C4794E8E3BFBC2924DE45E47E5408536E3548A03591DA0556D595AB78C55149F45170F2CB7736A46976D1C09BFCE4DF6EAB040599AF235968F8070E25C2";
        assertEquals(add(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void addition2() throws Exception {
        String a = "87D6D58D3991D536544389CEFA72FD0EBED75B2EBDC2C79BC3717793108F0952011E7E2D7040FFFB32F10BEB8ED0A485026B6860020B230128A8222B0525A6888942FB01C537800BF25D6F021D4B99D3CBD6DF9055FA22F91A6CFC4FDFC408AEF78F6418D3CE4E20EC7888B61BAE3D73C27C257CCA905DE0353C3A7CFFD9FE15";
        String b = "791EDB102DA183759979CEF70E1405AF14B98CD44357EADF6A8E35E49F99BB56CBD3F68897D6E05502ED1DE14EC46D04F96992C2D129737987E84E62371648B37633794016852A8CBFFCFDE06B17EC216AE8914D59E677A15A90361A594F0D1524A41AE63C59D343D4E522646722B0292DD7C85571AC9A84FDA6CD2D8DE307F6";
        String expected = "100F5B09D673358ABEDBD58C6088702BDD390E803011AB27B2DFFAD77B028C4A8CCF274B60817E05035DE29CCDD951189FBD4FB22D334967AB090708D3C3BEF3BFF767441DBBCAA98B25A6CE2886385F536BF70DDAFE09A9A74FD326A391315C41C337EFF10282164C15DAB1A82D0ED9CF053EDD23C3CF86532E307AA8DBD060B";
        assertEquals(add(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void addition3() throws Exception {
        String a = "170076B15F9575D21DE39D5C429799BBCDDB867016DE2248E3CFDE73A4D70C8636A9E41ABE671E7B9FB4739A5FF64DF9D0D3A64E0C9B20BFE58F1C62B28477EE9FD202010BAC440ADF3CA016A32DB844F23DEC2AB93AE869A6262FC23C5CE419807CDBA930A5433884E3B34B22477289BD3A7712CDD4B4110BD9887E7428FDF7";
        String b = "9D1C2D6E1591932F73C2F499C4E0A2E252DE828CDA7842CE0972C4101FE772B56C45C475EDDEDAEC2DBD13E375E02D2C149B69AB51FF3F94533CA34A815484EC86DACE936BDC62B5F3F9EB6F5BE6BD253E256181D35D7D63EE24459824D462C53676E3DFF98700415ADA65FDA7CBD3B3F359C817F52BEDA70C9DD85F68473C6";
        String expected = "20D2398840EE8F05151FCCA5DEE5A3E9F3096E98E485A675C4670AB4A6D583B18D6E40621D450C2A629044D8975450CC921D5CE8C1BB14B92AC2E6975A99C03D683FAEEA426A0A363E7C3ECD98EC241746204242D670C03FE508741BBEAA2A45D3E449E7303DB33C9A9159AAFCC42FC4FC7013944D2772EB7CA366046AAD71BD";
        assertEquals(add(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void addition4() throws Exception {
        String a = "8703A1E982F278420C2D60CA7A0ED76C91855E3147B50357074A04EAF6515F07C1D8967674C7577D4112652E8135D145329F0DAE738F75C35004A154F1C43449DB87B6BE0F3EBF5B3BA1016F0A04A10C7EA76C3D30EEDB34B1E6E1009B3FF5C987FA313097485E6F8C78744E2F49DF62D13AD204E00F731BAE0E085C353D8D75";
        String b = "B3CEBC5B7F698FF87B7BED132D299F68010583247B9C9792E809ED86C07B4D65C9E83AEE30897B0DAB7E5883EABE17B40B8F39267AC62377A6AFE0976AA0B81707282EB5FE59B66ED5EB1D3118CA3555F3AFCC28990AB016FE5B89D9159E6BB26151C923501F69629A0D75A6C06B8D0AA0364694DDCEDE35441E011347F85E62";
        String expected = "13AD25E45025C083A87A94DDDA73876D4928AE155C3519AE9EF53F271B6CCAC6D8BC0D164A550D28AEC90BDB26BF3E8F93E2E46D4EE55993AF6B481EC5C64EC60E2AFE5740D9875CA118C1EA022CED66272573865C9F98B4BB0426AD9B0DE617BE94BFA53E767C7D22685E9F4EFB56C6D71711899BDDE5150F22C096F7D35EBD7";
        assertEquals(add(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void subtraction1() throws Exception {
        String a = "D4D2110984907B5625309D956521BAB4157B8B1ECE04043249A3D379AC112E5B9AF44E721E148D88A942744CF56A06B92D28A0DB950FE4CED2B41A0BD38BCE7D0BE1055CF5DE38F2A588C2C9A79A75011058C320A7B661C6CE1C36C7D870758307E5D2CF07D9B6E8D529779B6B2910DD17B6766A7EFEE215A98CAC300F2827DB";
        String b = "3A7EF2554E8940FA9B93B2A5E822CC7BB262F4A14159E4318CAE3ABF5AEB1022EC6D01DEFAB48B528868679D649B445A753684C13F6C3ADBAB059D635A2882090FC166EA9F0AAACD16A062149E4A0952F7FAAB14A0E9D3CB0BE9200DBD3B0342496421826919148E617AF1DB66978B1FCD28F8408506B79979CCBCC7F7E5FDE7";
        String expected = "9A531EB436073A5B899CEAEF7CFEEE386318967D8CAA2000BCF598BA51261E38AE874C932360023620DA0CAF90CEC25EB7F21C1A55A3A9F327AE7CA879634C73FC1F9E7256D38E258EE860B509506BAE185E180C06CC8DFBC23316BA1B357240BE81B14C9EC0A25A73AE85C0049185BD4A8D7E29F9F82A7C2FBFEF68174229F4";
        assertEquals(subtract(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void subtraction2() throws Exception {
        String a = "87D6D58D3991D536544389CEFA72FD0EBED75B2EBDC2C79BC3717793108F0952011E7E2D7040FFFB32F10BEB8ED0A485026B6860020B230128A8222B0525A6888942FB01C537800BF25D6F021D4B99D3CBD6DF9055FA22F91A6CFC4FDFC408AEF78F6418D3CE4E20EC7888B61BAE3D73C27C257CCA905DE0353C3A7CFFD9FE15";
        String b = "791EDB102DA183759979CEF70E1405AF14B98CD44357EADF6A8E35E49F99BB56CBD3F68897D6E05502ED1DE14EC46D04F96992C2D129737987E84E62371648B37633794016852A8CBFFCFDE06B17EC216AE8914D59E677A15A90361A594F0D1524A41AE63C59D343D4E522646722B0292DD7C85571AC9A84FDA6CD2D8DE307F6";
        String expected = "EB7FA7D0BF051C0BAC9BAD7EC5EF75FAA1DCE5A7A6ADCBC58E341AE70F54DFB354A87A4D86A1FA63003EE0A400C37800901D59D30E1AF87A0BFD3C8CE0F5DD5130F81C1AEB2557F32607121B233ADB260EE4E42FC13AB57BFDCC6358674FB99D2EB493297747ADD17936651B48B8D4A94A45D2758E3C35B37956D4F71F6F61F";
        assertEquals(subtract(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void subtraction3() throws Exception {
        String a = "170076B15F9575D21DE39D5C429799BBCDDB867016DE2248E3CFDE73A4D70C8636A9E41ABE671E7B9FB4739A5FF64DF9D0D3A64E0C9B20BFE58F1C62B28477EE9FD202010BAC440ADF3CA016A32DB844F23DEC2AB93AE869A6262FC23C5CE419807CDBA930A5433884E3B34B22477289BD3A7712CDD4B4110BD9887E7428FDF7";
        String b = "9D1C2D6E1591932F73C2F499C4E0A2E252DE828CDA7842CE0972C4101FE772B56C45C475EDDEDAEC2DBD13E375E02D2C149B69AB51FF3F94533CA34A815484EC86DACE936BDC62B5F3F9EB6F5BE6BD253E256181D35D7D63EE24459824D462C53676E3DFF98700415ADA65FDA7CBD3B3F359C817F52BEDA70C9DD85F68473C6";
        String expected = "D2EB3DA7E3C5C9F26A76E12A6498F8DA8AD9E4749369E1C0338B232A2D8955ADFE587D35F8930CCDCD8A25C28984B270F89EFB3577B2CC6A05B522E0A6F2F9FD7645517D4EE7DDF7FFD015FAD6F4C729E5B96129C0510936743EB68BA0F9DED2D156D6B310CD3346F360CEB47CAB54E7E04DA914E81F5369B0FAAF87DA48A31";
        assertEquals(subtract(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void subtraction4() throws Exception {
        String a = "8703A1E982F278420C2D60CA7A0ED76C91855E3147B50357074A04EAF6515F07C1D8967674C7577D4112652E8135D145329F0DAE738F75C35004A154F1C43449DB87B6BE0F3EBF5B3BA1016F0A04A10C7EA76C3D30EEDB34B1E6E1009B3FF5C987FA313097485E6F8C78744E2F49DF62D13AD204E00F731BAE0E085C353D8D75";
        String b = "B3CEBC5B7F698FF87B7BED132D299F68010583247B9C9792E809ED86C07B4D65C9E83AEE30897B0DAB7E5883EABE17B40B8F39267AC62377A6AFE0976AA0B81707282EB5FE59B66ED5EB1D3118CA3555F3AFCC28990AB016FE5B89D9159E6BB26151C923501F69629A0D75A6C06B8D0AA0364694DDCEDE35441E011347F85E62";
        String expected = "negative number";
        assertEquals(subtract(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void multiplication1() throws Exception {
        String a = "D4D2110984907B5625309D956521BAB4157B8B1ECE04043249A3D379AC112E5B9AF44E721E148D88A942744CF56A06B92D28A0DB950FE4CED2B41A0BD38BCE7D0BE1055CF5DE38F2A588C2C9A79A75011058C320A7B661C6CE1C36C7D870758307E5D2CF07D9B6E8D529779B6B2910DD17B6766A7EFEE215A98CAC300F2827DB";
        String b = "3A7EF2554E8940FA9B93B2A5E822CC7BB262F4A14159E4318CAE3ABF5AEB1022EC6D01DEFAB48B528868679D649B445A753684C13F6C3ADBAB059D635A2882090FC166EA9F0AAACD16A062149E4A0952F7FAAB14A0E9D3CB0BE9200DBD3B0342496421826919148E617AF1DB66978B1FCD28F8408506B79979CCBCC7F7E5FDE7";
        String expected = "30A120B609DCBE28B09CA92E12DD29D77AE6400DC22B026AFB5FB945AAF62B57F4E48BD299261F02BBB35DD2495B5CD2713BF0E30192DAE1B334659160C8552423F0AD7FB82870920DF4E9B57980EAD2ADA9F3EF4B5D0718AB7F1053700395278998CB9AD48498D65150E3E837B0BB169D432B441424557061F838A17C65F90A31105F599BF69B87485BF9C70F51D37A417E476E372558C26782AC8C8F35C3D1227E851D8A72CD708700FD90C5E17F22C4EA15730345E56BD76F04B54580813CBE306B4404C6F34BCD9840D2911E6B3CF6DE3EE428C274EDF0A97335D8256DA26FCD67BA5450593A15F6B527ECE76FBBE20F7A882347614AF4B7FAF55086659D";
        assertEquals(multiply(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void multiplication2() throws Exception {
        String a = "87D6D58D3991D536544389CEFA72FD0EBED75B2EBDC2C79BC3717793108F0952011E7E2D7040FFFB32F10BEB8ED0A485026B6860020B230128A8222B0525A6888942FB01C537800BF25D6F021D4B99D3CBD6DF9055FA22F91A6CFC4FDFC408AEF78F6418D3CE4E20EC7888B61BAE3D73C27C257CCA905DE0353C3A7CFFD9FE15";
        String b = "791EDB102DA183759979CEF70E1405AF14B98CD44357EADF6A8E35E49F99BB56CBD3F68897D6E05502ED1DE14EC46D04F96992C2D129737987E84E62371648B37633794016852A8CBFFCFDE06B17EC216AE8914D59E677A15A90361A594F0D1524A41AE63C59D343D4E522646722B0292DD7C85571AC9A84FDA6CD2D8DE307F6";
        String expected = "4044EA5A25164D587B8B56B8E83AEA576AB448F5C6C2B8B94BE32DEAEE0205CB4EE7F38B011731DF3AB60DCD67B0F9A4F1321230E38C5E62214F6369BE12A3C730150C1E0A54BE2820E61B35F0184ED6667EF0CB132220C6CD75A02CDD45B310BC73398279BB3A3AAB14C1FDE28E7025AB2295B18B17F3EA87D18BB309EA04305E2C0A4F949A560C4F2AD3BC9C2F18564D173D2DD01673ACE42A9E0B157003469C835657AEBE14D382E88736B276C720A439D68897BAEF046878C0CB3595B42A337EB00EA1F3A7A5294F26AE99E700756C4EB7E2EA365A2EF7580A4955FDEBE0660CEDF5A4E56A01CB3B0C920BE8A03A69C4E6066B1D14AA8FA2090BAF0BBB2E";
        assertEquals(multiply(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void multiplication3() throws Exception {
        String a = "170076B15F9575D21DE39D5C429799BBCDDB867016DE2248E3CFDE73A4D70C8636A9E41ABE671E7B9FB4739A5FF64DF9D0D3A64E0C9B20BFE58F1C62B28477EE9FD202010BAC440ADF3CA016A32DB844F23DEC2AB93AE869A6262FC23C5CE419807CDBA930A5433884E3B34B22477289BD3A7712CDD4B4110BD9887E7428FDF7";
        String b = "9D1C2D6E1591932F73C2F499C4E0A2E252DE828CDA7842CE0972C4101FE772B56C45C475EDDEDAEC2DBD13E375E02D2C149B69AB51FF3F94533CA34A815484EC86DACE936BDC62B5F3F9EB6F5BE6BD253E256181D35D7D63EE24459824D462C53676E3DFF98700415ADA65FDA7CBD3B3F359C817F52BEDA70C9DD85F68473C6";
        String expected = "E1DD0ECBC0569D86631305BDF6715FFAE730E73504AC45962E5E8A4CCA50C2D7B5D56963ECBC7B581E820835EE00B1F6F4E43072F98CA5016E51A666B575C90A2FABBAC111435C86550EFDA9C4924D9A503777A0A1DE78C286E2FD73CAA861C3EA1E84053250CA2A235AF93C8AC105A08D3049909464394D6D16598FBAE735944C2D41C2E1F01C97428069CF3427FB8ED246CF15F163DFC385EDADF2EBE1A8900ECA0A6D6F4B3008FF1CB371BA03EFFEE3EFAF01E13673FCECA3A93CA89CBF8ABAEEF060B773F10B174A5E13BE3831195662FABDF07153F027C9617A67D65BCFB154EA70454CA6E8CDA2B118CF8A785AF2EDCBA40BE070FADCD57D8F26620A";
        assertEquals(multiply(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void multiplication4() throws Exception {
        String a = "8703A1E982F278420C2D60CA7A0ED76C91855E3147B50357074A04EAF6515F07C1D8967674C7577D4112652E8135D145329F0DAE738F75C35004A154F1C43449DB87B6BE0F3EBF5B3BA1016F0A04A10C7EA76C3D30EEDB34B1E6E1009B3FF5C987FA313097485E6F8C78744E2F49DF62D13AD204E00F731BAE0E085C353D8D75";
        String b = "B3CEBC5B7F698FF87B7BED132D299F68010583247B9C9792E809ED86C07B4D65C9E83AEE30897B0DAB7E5883EABE17B40B8F39267AC62377A6AFE0976AA0B81707282EB5FE59B66ED5EB1D3118CA3555F3AFCC28990AB016FE5B89D9159E6BB26151C923501F69629A0D75A6C06B8D0AA0364694DDCEDE35441E011347F85E62";
        String expected = "5ED492797CDB6D1CE4FE2BA7F7C7CC8CA220007237417066C8B77645FCA22793632F9630BB870AFA527B9A34A4D400B881ADE6CD421267BB820578EEE043A65029E3B808FCA0338883F91C54928E1BB8F1067CAEE97301250AF9C0A54302E25C5404D0D9AE7A2E9AFA450EA79D3CB1311B36BA0389FABE5D4CCCED13B6B777866EBA7A6E315EEF89AF3A7D91C8F20CD9A9DED3AB508991B855E5D1BE089D325324E1E8DAA1CE17B8895751E24BD2AFE25B22E8CD199DD97BE7D7931FEB9860693536E4F271EBF41F49A243D4179FA21102CBD941FDE6DFB0DA7A41967BDAB85A10D3923221A9E73FDAFF5026B93A7E8423D4C02D4FDA0D7B4D5DA96477D91CCA";
        assertEquals(multiply(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void multiplication512() throws Exception{
        String a = "A664199B424E606126A31B875E3D5E9E9C2E13D6995CC801E60C30247808A6EE01E78895E16EAD95354FE50A9396DA3D5BDB6327FBF7DE11871BF3D0143055EC";
        String b = "D4DA433DBC99DE3D9F192F4B84000A628F00F01D10532B8299BE4987E001E2F23137039D7106217C58800406778F64750E949A6D229AC61FCD424632593C4735";
        String expected = "8A58C226B4429FFC0493D57D8B3EF3048C3C82269D5C2CC9E4F40A078C09107AD50C637D281E740790C76BC0D9DC9243D90DCE7BB8FA9FDA799D0C80BC2913E8B6B2E24CE7FCFD72F6D14F2539E68E80AB31B0265E16DAED3B4FA75091FC11E27C69FD3FAFEC5CB66CE5796E01D3F091D140CE0E6D33956B80F908F8C5263DDC";
        assertEquals(multiply(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void division1() throws Exception {
        String a = "D4D2110984907B5625309D956521BAB4157B8B1ECE04043249A3D379AC112E5B9AF44E721E148D88A942744CF56A06B92D28A0DB950FE4CED2B41A0BD38BCE7D0BE1055CF5DE38F2A588C2C9A79A75011058C320A7B661C6CE1C36C7D870758307E5D2CF07D9B6E8D529779B6B2910DD17B6766A7EFEE215A98CAC300F2827DB";
        String b = "3A7EF2554E8940FA9B93B2A5E822CC7BB262F4A14159E4318CAE3ABF5AEB1022EC6D01DEFAB48B528868679D649B445A753684C13F6C3ADBAB059D635A2882090FC166EA9F0AAACD16A062149E4A0952F7FAAB14A0E9D3CB0BE9200DBD3B0342496421826919148E617AF1DB66978B1FCD28F8408506B79979CCBCC7F7E5FDE7";
        String expected = "3";
        assertEquals(divide(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void division2() throws Exception {
        String a = "87D6D58D3991D536544389CEFA72FD0EBED75B2EBDC2C79BC3717793108F0952011E7E2D7040FFFB32F10BEB8ED0A485026B6860020B230128A8222B0525A6888942FB01C537800BF25D6F021D4B99D3CBD6DF9055FA22F91A6CFC4FDFC408AEF78F6418D3CE4E20EC7888B61BAE3D73C27C257CCA905DE0353C3A7CFFD9FE15";
        String b = "791EDB102DA183759979CEF70E1405AF14B98CD44357EADF6A8E35E49F99BB56CBD3F68897D6E05502ED1DE14EC46D04F96992C2D129737987E84E62371648B37633794016852A8CBFFCFDE06B17EC216AE8914D59E677A15A90361A594F0D1524A41AE63C59D343D4E522646722B0292DD7C85571AC9A84FDA6CD2D8DE307F6";
        String expected = "1";
        assertEquals(divide(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void division3() throws Exception {
        String a = "170076B15F9575D21DE39D5C429799BBCDDB867016DE2248E3CFDE73A4D70C8636A9E41ABE671E7B9FB4739A5FF64DF9D0D3A64E0C9B20BFE58F1C62B28477EE9FD202010BAC440ADF3CA016A32DB844F23DEC2AB93AE869A6262FC23C5CE419807CDBA930A5433884E3B34B22477289BD3A7712CDD4B4110BD9887E7428FDF7";
        String b = "9D1C2D6E1591932F73C2F499C4E0A2E252DE828CDA7842CE0972C4101FE772B56C45C475EDDEDAEC2DBD13E375E02D2C149B69AB51FF3F94533CA34A815484EC86DACE936BDC62B5F3F9EB6F5BE6BD253E256181D35D7D63EE24459824D462C53676E3DFF98700415ADA65FDA7CBD3B3F359C817F52BEDA70C9DD85F68473C6";
        String expected = "2";
        assertEquals(divide(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void division4() throws Exception {
        String a = "8703A1E982F278420C2D60CA7A0ED76C91855E3147B50357074A04EAF6515F07C1D8967674C7577D4112652E8135D145329F0DAE738F75C35004A154F1C43449DB87B6BE0F3EBF5B3BA1016F0A04A10C7EA76C3D30EEDB34B1E6E1009B3FF5C987FA313097485E6F8C78744E2F49DF62D13AD204E00F731BAE0E085C353D8D75";
        String b = "B3CEBC5B7F698FF87B7BED132D299F68010583247B9C9792E809ED86C07B4D65C9E83AEE30897B0DAB7E5883EABE17B40B8F39267AC62377A6AFE0976AA0B81707282EB5FE59B66ED5EB1D3118CA3555F3AFCC28990AB016FE5B89D9159E6BB26151C923501F69629A0D75A6C06B8D0AA0364694DDCEDE35441E011347F85E62";
        String expected = "0";
        assertEquals(divide(a,b,16,16), expected.toLowerCase());
    }
    @Test
    void division5() throws Exception {
        String a = "1000110";
        String b = "10";
        String expected = "101101";
        assertEquals(divide(a,b,2,2), expected.toLowerCase());
    }

    @Test
    void MulAndDiv1() throws Exception {
        String a = "D4D2110984907B5625309D956521BAB4157B8B1ECE04043249A3D379AC112E5B9AF44E721E148D88A942744CF56A06B92D28A0DB950FE4CED2B41A0BD38BCE7D0BE1055CF5DE38F2A588C2C9A79A75011058C320A7B661C6CE1C36C7D870758307E5D2CF07D9B6E8D529779B6B2910DD17B6766A7EFEE215A98CAC300F2827DB";
        String b = "3A7EF2554E8940FA9B93B2A5E822CC7BB262F4A14159E4318CAE3ABF5AEB1022EC6D01DEFAB48B528868679D649B445A753684C13F6C3ADBAB059D635A2882090FC166EA9F0AAACD16A062149E4A0952F7FAAB14A0E9D3CB0BE9200DBD3B0342496421826919148E617AF1DB66978B1FCD28F8408506B79979CCBCC7F7E5FDE7";
        String expected = "D4D2110984907B5625309D956521BAB4157B8B1ECE04043249A3D379AC112E5B9AF44E721E148D88A942744CF56A06B92D28A0DB950FE4CED2B41A0BD38BCE7D0BE1055CF5DE38F2A588C2C9A79A75011058C320A7B661C6CE1C36C7D870758307E5D2CF07D9B6E8D529779B6B2910DD17B6766A7EFEE215A98CAC300F2827DB";
        assertEquals(divide(multiply(a,b,16,16),b,16,16), expected.toLowerCase());
    }

    @Test
    void MulAndDiv2() throws Exception {
        String a = "87D6D58D3991D536544389CEFA72FD0EBED75B2EBDC2C79BC3717793108F0952011E7E2D7040FFFB32F10BEB8ED0A485026B6860020B230128A8222B0525A6888942FB01C537800BF25D6F021D4B99D3CBD6DF9055FA22F91A6CFC4FDFC408AEF78F6418D3CE4E20EC7888B61BAE3D73C27C257CCA905DE0353C3A7CFFD9FE15";
        String b = "791EDB102DA183759979CEF70E1405AF14B98CD44357EADF6A8E35E49F99BB56CBD3F68897D6E05502ED1DE14EC46D04F96992C2D129737987E84E62371648B37633794016852A8CBFFCFDE06B17EC216AE8914D59E677A15A90361A594F0D1524A41AE63C59D343D4E522646722B0292DD7C85571AC9A84FDA6CD2D8DE307F6";
        String expected = "87D6D58D3991D536544389CEFA72FD0EBED75B2EBDC2C79BC3717793108F0952011E7E2D7040FFFB32F10BEB8ED0A485026B6860020B230128A8222B0525A6888942FB01C537800BF25D6F021D4B99D3CBD6DF9055FA22F91A6CFC4FDFC408AEF78F6418D3CE4E20EC7888B61BAE3D73C27C257CCA905DE0353C3A7CFFD9FE15";
        assertEquals(divide(multiply(a,b,16,16),b,16,16), expected.toLowerCase());
    }

    @Test
    void MulAndDiv3() throws Exception {
        String a = "170076B15F9575D21DE39D5C429799BBCDDB867016DE2248E3CFDE73A4D70C8636A9E41ABE671E7B9FB4739A5FF64DF9D0D3A64E0C9B20BFE58F1C62B28477EE9FD202010BAC440ADF3CA016A32DB844F23DEC2AB93AE869A6262FC23C5CE419807CDBA930A5433884E3B34B22477289BD3A7712CDD4B4110BD9887E7428FDF7";
        String b = "9D1C2D6E1591932F73C2F499C4E0A2E252DE828CDA7842CE0972C4101FE772B56C45C475EDDEDAEC2DBD13E375E02D2C149B69AB51FF3F94533CA34A815484EC86DACE936BDC62B5F3F9EB6F5BE6BD253E256181D35D7D63EE24459824D462C53676E3DFF98700415ADA65FDA7CBD3B3F359C817F52BEDA70C9DD85F68473C6";
        String expected = "170076B15F9575D21DE39D5C429799BBCDDB867016DE2248E3CFDE73A4D70C8636A9E41ABE671E7B9FB4739A5FF64DF9D0D3A64E0C9B20BFE58F1C62B28477EE9FD202010BAC440ADF3CA016A32DB844F23DEC2AB93AE869A6262FC23C5CE419807CDBA930A5433884E3B34B22477289BD3A7712CDD4B4110BD9887E7428FDF7";
        assertEquals(divide(multiply(a,b,16,16),b,16,16), expected.toLowerCase());
    }

    @Test
    void MulAndDiv4() throws Exception {
        String a = "8703A1E982F278420C2D60CA7A0ED76C91855E3147B50357074A04EAF6515F07C1D8967674C7577D4112652E8135D145329F0DAE738F75C35004A154F1C43449DB87B6BE0F3EBF5B3BA1016F0A04A10C7EA76C3D30EEDB34B1E6E1009B3FF5C987FA313097485E6F8C78744E2F49DF62D13AD204E00F731BAE0E085C353D8D75";
        String b = "B3CEBC5B7F698FF87B7BED132D299F68010583247B9C9792E809ED86C07B4D65C9E83AEE30897B0DAB7E5883EABE17B40B8F39267AC62377A6AFE0976AA0B81707282EB5FE59B66ED5EB1D3118CA3555F3AFCC28990AB016FE5B89D9159E6BB26151C923501F69629A0D75A6C06B8D0AA0364694DDCEDE35441E011347F85E62";
        String expected = "8703A1E982F278420C2D60CA7A0ED76C91855E3147B50357074A04EAF6515F07C1D8967674C7577D4112652E8135D145329F0DAE738F75C35004A154F1C43449DB87B6BE0F3EBF5B3BA1016F0A04A10C7EA76C3D30EEDB34B1E6E1009B3FF5C987FA313097485E6F8C78744E2F49DF62D13AD204E00F731BAE0E085C353D8D75";
        assertEquals(divide(multiply(a,b,16,16),b,16,16), expected.toLowerCase());
    }

    @Test
    void exponentiation1() throws Exception {
        String a = "a664199b424e606126a31b875e3d5e9e9c2e13d6995cc801e60c30247808a6ee01e78895e16ead95354fe50a9396da3d5bdb6327fbf7de11871bf3d0143055ec";
        String b = "99";
        String expected = "";
        assertEquals(exponentiate(a,b,16,16), expected.toLowerCase());
    }

    @Test
    void exponentiation2() throws Exception {
        String a = "7723A9B9AFFCFCACFEF4537D2C587BA1E07EC2A27B9C907261F6461044DE2FEC26DA9BACDAC77063244D575EE788BB1145D7D09A94EC4B59859669CF8D86F454";
        String b = "17";
        String expected = "6255b7b2a1d3db87219710ed85caa34b72ca1852f37eeb125ca82def4566d6de61353b03df489e6476d83f60bed51efe9ca3be6ee677b43e8a148bd003ad98f573220a7de8ffb3c32aeb0154b33c112655cbd27171db874d771a6470d60653860de12d167309d2ed6c102e10253f1316095d0270fc0a5644de9a93181f665f42f2972c8e2ac7a3b610ee3583e41ca9ec606d977c4fc4527a00f410a5ca7aecd5f5ded501d8bba914d3f6b759b4344adea98916063a2828bb14134c8ed2360629de1e945ac51f62f902451cfd42c43c5e2afbc958b827f4478ac879eb428be4bdd5b74f2c7d03620166d8a94780a53a9ec23bfff90a3a71d9338402e9fa352f16f33b693f391a05338136392fe7e9088408b05672358d33f9356bb82074d499e4a47591dd1b72b6e1ee407532296937c913bbf9d5ac5fcfa05cf84056d698eaa689995cfcf6bacc233fae6559852188aa5aab9c58cb4e194fb990db98f153f71b017566628f14731994d1c2e41b7cc27b3948f1a3d3b8ce8e9158806c8950d05bf6cb08770a8e718b52ba3eddcdc03a173be67771605f5e649448c3aaad021c9ff1968228559e3603aa457f0823dff606c69438acc295ed3324ed116fed0f6c32dac5be40bb78a6ac3bfb664dfbf7113135fd9b56cabd22b5a148e66667045f69d5a32c899ba0530c3b2eb7f23c2804e63fe0cfc015b74aba6b9f2a31b6bb8ef26f7e7435ac1dc505093c6b4bcc94b01b1319c1f0e2609b0c2a8961583eeb4d6deca89e90530e419e862bee3ec9fdd56b725abd8ca98263ef25c674349956f1b0a51f10bb302ab762903d2cc681fe7dd7ac940b89af34ff6197ac7ba51e503072e37e88b9ff64991fd46799b751fc7bcb02da2db4c884af9349880d2479862e6b7598512890f527602cdde99f230a57cbe1f876e6e34c1a3868922d0ea424b23e1fef1da64009b093d88144c8c3308852cb2739b6a927b4b6eb4f0e5c604c6e6ce5d602935dfc90a566d08e2fae7dc89379d526c40e6eb19b9e3de0f1485bc78113bfb10a08210ef244f5b3d5aad51af78c48119ad2e820d47489142c8ff14b210c8e0e8217ce9b6dea1f930f0ba4c612e712546583e584788df1b20785c0b4667890d1fd5441efe66603e1b439cb400b399a35862e2eb4865bc025ecf8d82e70a3fd71dc307bc6ffed5c40a75affb0d713bac08d6d53f23dac044625f0a2e63f413502790e777215ac94071d2aba312c2f1c7608182b16d0d42ea06f39d14e3b5938c19648f5916b1f90001f5e90d30606d52cc95cb1b98a417117109240a3b2e3a1faf80f42994b54329639f7faae07204576ec9b14325444eb9ceedd4ed0220f2ec557faa9e4fcc6d52b2577640b65bef48ec63c81b899e55e8673b4a9dbfc2df402ae029971ce16787a1b18adb1420a204c56e7b71fb0451c49d82ff8ccc8d7a53289db611169bf2187ee70ab18e8ebe753583d89106246885ee514da24dc7d0f1c848dc5b9c33a959cbc78837d3eb44339697f2e716d7a1a8d013a40d41aa0f494438c3fcca9d31e71cb65bc9cfff75246d1828997d66126a590e2dfa1cd252d6e42b81a1ac467bad8542269f88993db448b7f748d0e0163c966b066e6f221305496afe4a2bcebdc86a91928e0a19dbf1865a5e98a681d2fff50cd516fb5420ce25a76cd739669299ec869ef6ee36a792daef80959f36d2b0d4b8463929f9d3b437a070d34e51cd467525fb14982374e5a533e519adf8e5aedb75a39b979ab9803f7a60fbd0aa9e86a4782a0f9b1cb2288e970c853d80908d468c40c2a679a25e64cb13fe03cc69782e8cd2356b4fc8bfbfc5d2564868017264af245b24c6cf48594d5bbcecba12fd8e1e872b642036e22263c53f47fe9e72b842dd7cb00083bd698e21ad0a714faf1839562527ed0421d2c6cf1c5cf201fd5537a503afc7d2e33d60f538d5ce0e383a2ed8333dc5b86dbfaeecfb13f4f6f389e321717822e05badb6fffafa7c76d901c14f48deea971a7132a4f8c08b1eea66e3f3283f64a7476f529fb11e910201d71198981bd491d5ccc5ea6b7400000000000";
        assertEquals(exponentiate(a,b,16,16), expected.toLowerCase());
    }
}
